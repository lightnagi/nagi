/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
/**
 * Given a singly linked list L: L0→L1→…→Ln-1→Ln, reorder it to: L0→Ln→L1→Ln-1→L2→Ln-2→…
 * You must do this in-place without altering the nodes' values.
 * 思路：把后半部分反转。
 */
public class Solution {
    public void reorderList(ListNode head) {
        if(head == null || head.next == null) return;
        ListNode slow = head, fast = head;
        while(fast.next != null && fast.next.next != null){
            slow = slow.next;
            fast = fast.next.next;
        }
        ListNode pre = slow;//前半部分的最后一个结点
        ListNode cur = slow.next; //后半部分的第一个结点
        //反转后半部分
        while(cur.next != null){
            ListNode node = cur.next;
            cur.next = node.next;
            node.next = pre.next;
            pre.next = node;
        }
        //连接
        cur = pre.next;
        slow = head;
        while(slow != pre){
            pre.next = cur.next;
            cur.next = slow.next;
            slow.next = cur;
            slow = cur.next;
            cur = pre.next;
        }
    }
}
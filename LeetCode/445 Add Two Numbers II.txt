/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
 //给定两个链表，从两个链表尾部相加（不修改链表，也就是说不能reverse倒置）
 //思路：建立两个栈，把链表的值输入栈中，再输出相加，形成结点。
public class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        Stack<Integer> s1 = new Stack<Integer>();
        Stack<Integer> s2 = new Stack<Integer>();
        while(l1 != null){
            s1.push(l1.val);
            l1 = l1.next;
        }
        while(l2 != null){
            s2.push(l2.val);
            l2 = l2.next;
        }
        int sum = 0;
        ListNode node = new ListNode(0);
        while(!s1.isEmpty() || !s2.isEmpty()){
            if(!s1.isEmpty()) sum += s1.pop();
            if(!s2.isEmpty()) sum += s2.pop();
            node.val = sum % 10;
            ListNode temp = new ListNode(sum / 10);
            temp.next = node;
            node = temp;
            sum /= 10;  	//sum作为和，同时作为进位
        }
        return node.val == 0 ? node.next : node;  //若进位为0，则不用输出
    }
}
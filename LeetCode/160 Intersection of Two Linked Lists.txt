/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
 //Approach #1
public class Solution {		//在Linked List Cycle II的基础上，将一链表的尾部指向另一链表的首部
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        if(headA == null || headB == null) return null;
        ListNode node = headA;
        while(node.next != null){
            node = node.next;
        }
        node.next = headB;
        
        ListNode slow = headA;
        ListNode fast = headA.next;
        while(slow != fast){
            if(fast == null || fast.next == null){
                node.next = null;
                return null;
            } 
            slow = slow.next;
            fast = fast.next.next;
        }
        
        ListNode result = headA;
        while(result != slow.next){
            result = result.next;
            slow = slow.next;
        }
        node.next = null;
        return result;
    }
}

Approach #2 (Two Pointers) 
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
/* 双指针从两个链表的首部同时前进，到达链表尾部则重定向至另一链表首部，
 * 设一条链表长度为 a+c ，另一条为 b+c ，则一个指针前进(a+c+b),另一个前进(b+c+a),相遇点即为所求，
 * 若c为0，则相遇点为 null
*/
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        if(headA == null || headB == null) return null;
        
        ListNode nodeA = headA;
        ListNode nodeB = headB;
        while(nodeA != nodeB){
            if(nodeA == null){
                nodeA = headB;
            } else {
                nodeA = nodeA.next;
            }
            if(nodeB == null){
                nodeB = headA;
            } else {
                nodeB = nodeB.next;
            }
        }
        return nodeA;
    }
}
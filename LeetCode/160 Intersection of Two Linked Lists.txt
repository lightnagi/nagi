/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {		//在Linked List Cycle II的基础上，将一链表的尾部指向另一链表的首部
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        if(headA == null || headB == null) return null;
        ListNode node = headA;
        while(node.next != null){
            node = node.next;
        }
        node.next = headB;
        
        ListNode slow = headA;
        ListNode fast = headA.next;
        while(slow != fast){
            if(fast == null || fast.next == null){
                node.next = null;
                return null;
            } 
            slow = slow.next;
            fast = fast.next.next;
        }
        
        ListNode result = headA;
        while(result != slow.next){
            result = result.next;
            slow = slow.next;
        }
        node.next = null;
        return result;
    }
}

Approach #2 (Two Pointers) 
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
 /*双指针从两个链表的首部同时前进，到达链表尾部则重定向至另一链表首部，
   若相遇，则第一次相遇结点即为所求
*/
public class Solution {    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        if(headA == null || headB == null) return null;
        ListNode p = headA;
        ListNode q = headB;
        for(int i = 0; i < 2; i++){
            while(p != null && q!= null){ 
                p = p.next;
                q = q.next;
            }
            if(p == null){
                p = headB;
            }else{
                q = headA;
            }
        }
        while(p != null && q != null){
            if(p == q) return p;
            p = p.next;
            q = q.next;
        }
        return null;
    }
}
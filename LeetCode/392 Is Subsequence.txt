/**
 * Given a string s and a string t, check if s is subsequence of t.
 * You may assume that there is only lower case English letters in both s and t.
 * t is potentially a very long (length ~= 500,000) string, and s is a short string (<=100).
 * 判断一个字符串s是否是另一个字符串t的子序列。
 *
 * 思路：双指针，一个指向s，一个指向t，遍历t，按顺序查找s中的字符。
 */

// 一 29ms
public class Solution {
    public boolean isSubsequence(String s, String t) {
        if(s.length() > t.length()) return false;
        if(s.length() == 0) return true;
        int i = 0, j = 0;
        while(j < t.length()){
            if(s.charAt(i) == t.charAt(j)){
                i++;
                if(i == s.length()) return true;
            }
            
            j++;
        }
        return false;
    }
}

// 二 2ms  优势在于indexOf()方法
public class Solution {
    public boolean isSubsequence(String s, String t) {
        if(s.length() > t.length()) return false;
        int j = 0;
        for(int i = 0; i < s.length(); i++){
            j = t.indexOf(s.charAt(i), j);
            if(j == -1) return false;
            j++;
        }
        return true;
    }
}
// by LeetCode:https://discuss.leetcode.com/topic/57205/java-only-2ms-much-faster-than-normal-2-pointers
// I checked the origin code of func "indexOf" and "charAt". 
// These two solution both traversed the char of String one by one to search the first occurrence specific char.
// The difference is that indexOf only call once function then traversed in "String.value[]" arr,
// but we used multiple calling function "charAt" to get the value in "String.value[]" arr.
// The time expense of calling function made the difference.
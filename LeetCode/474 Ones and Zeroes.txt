/**
 * For now, suppose you are a dominator of m 0s and n 1s respectively.
 * On the other hand, there is an array with strings consisting of only 0s and 1s.
 * Now your task is to find the maximum number of strings that you can form with given m 0s and n 1s.
 * Each 0 and 1 can be used at most once.
 * 给定一个数组，数组元素为字符串，字符串由‘0’和‘1’字符组成，
 * 给定m个0和n个1，使得组成的字符串数量最多，输出该最大值。
 * Input: Array = {"10", "0", "1"}, m = 1, n = 1     Output: 2 （“0”和“1”）
 *
 * 思路：动态规划。
 * 典型的背包问题，可列三维数组
 * dp[i][m][n] = Math.max(dp[i-1][m][n], dp[i-1][m-sumOfZero][n-sumOfOne]+1);
 * 

public class Solution {
    public int findMaxForm(String[] strs, int m, int n) {
        int len = strs.length;
        int[][] dp = new int[m+1][n+1];
        int[] nums = new int[2];
        for(String s : strs){
            nums = findZeroAndOne(s);
            for(int j = m; j >= nums[0]; j--){
                for(int k = n; k >= nums[1]; k--){
                    dp[j][k] = Math.max(dp[j][k], dp[j-nums[0]][k-nums[1]]+1);//空间优化为 二维数组
                }
            }
        }
        return dp[m][n];
    }
    
    public int[] findZeroAndOne(String str){
        int[] res = new int[2];
        
        for(char c : str.toCharArray()){
            if(c == '0'){
                res[0]++;
            }
            if(c == '1'){
                res[1]++;
            }
        }
        return res;
    }
}
/**
 * A sequence of numbers is called a wiggle sequence 
 * if the differences between successive numbers strictly alternate between positive and negative.
 * The first difference (if one exists) may be either positive or negative.
 * A sequence with fewer than two elements is trivially a wiggle sequence.
 * For example, [1,7,4,9,2,5] is a wiggle sequence
 * because the differences (6,-3,5,-7,3) are alternately positive and negative.
 * In contrast, [1,4,7,2,5] and [1,7,4,5,5] are not wiggle sequences,
 * the first because its first two differences are positive and the second because its last difference is zero.
 * Given a sequence of integers, return the length of the longest subsequence that is a wiggle sequence.
 * 求最长摆动子序列的长度。
 * 
 */

public class Solution {
    public int wiggleMaxLength(int[] nums) {
        if(nums.length == 0 || nums.length == 1) return nums.length;
        int k = 0;
        while(k < nums.length-1 && nums[k] == nums[k+1]){
            k++;    
        } 
        if(k == nums.length - 1) return 1;
        int result = 2;
        boolean f = nums[k] > nums[k+1];
        for(k++; k < nums.length-1; k++){
            if(f && nums[k] < nums[k+1] || !f && nums[k] > nums[k+1]){
                nums[result] = nums[k+1]; //通过修改数组，存储最长摆动子序列的元素
                result++;
                f = !f;
            } else {
                nums[result-1] = nums[k+1];    
            } 
        }
        return result;
    }
}
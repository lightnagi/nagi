/**
 * You are given a list of non-negative integers, a1, a2, ..., an,
 * and a target, S. Now you have 2 symbols + and -.
 * For each integer, you should choose one from + and - as its new symbol.
 * Find out how many ways to assign symbols to make sum of integers equal to target S.
 * 给定一个非负数组，用“+”、“-”使得数组元素计算结果为某个目标值，输出有几种可能。
 *
 * 思路：动态规划。
 * 设所有正数的和为p，负数的和为n（n为正数），目标为s，则p-n=s,p+n=sum,sum为数组所有元素的和。
 * 则p = (s+sum)>>2, 即问题可转化为 数组中的部分元素之和为某个定值，与416题相似。
 */

public class Solution {
    public int findTargetSumWays(int[] nums, int S) {
        int sum = 0;
        for(int n : nums){
            sum += n;
        }
        if(sum < S) return 0;
        sum += S;
        if((sum & 1) == 1) return 0;
        sum >>= 1; //除以2，用位操作符效率高
        
        int[] dp = new int[sum+1];
        dp[0] = 1;
        for(int n : nums){
            for(int i = sum; i >= n; i--){
                dp[i] += dp[i-n];
            }
        }
        return dp[sum];
    }
}
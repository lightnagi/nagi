/**
 * Given a positive integer n, break it into the sum of at least two positive integers 
 * and maximize the product of those integers. 
 * Return the maximum product you can get.
 * For example, given n = 2, return 1 (2 = 1 + 1); given n = 10, return 36 (10 = 3 + 3 + 4).
 * 将一个数拆为几个数的和，使得这几个数的积最大。
 *
 * 思路：这几个数只能为2或3。若为4，也可拆为2和2，若为5，可拆为2和3，其积为6，大于5.
 */

// 一 1ms
public class Solution {
    public int integerBreak(int n) {
        if(n == 2) return 1;
        if(n == 3) return 2;
        
        int product = 1;
        while(n > 4){
            product *= 3;
            n -= 3;
        }
        product *= n;
        return product;
    }
}

// 二 0ms
public class Solution {
    public int integerBreak(int n) {
        if(n == 2) return 1;
        if(n == 3) return 2;
        int temp = n - (n/3 - 1) * 3;
        if(temp == 3){
            return (int)Math.pow(3,n/3);
        } else if (temp == 4){
            return (int)Math.pow(3, n/3-1) * 4;
        } else {
            return (int)Math.pow(3, n/3-1) * 6;
        }
    }
}
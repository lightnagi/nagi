/**
 * Say you have an array for which the ith element is the price of a given stock on day i.
 * Design an algorithm to find the maximum profit.
 * You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times)
 * with the following restrictions:
 * You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).
 * After you sell your stock, you cannot buy stock on next day. (ie, cooldown 1 day)
 * 给定一个数组，数组元素为股票每天的价格，买卖股票使得利益最大化，输出最大利益。
 * （卖股票的第二天禁止操作）
 *
 * 思路：buy[i] = Math.max(buy[i-1], sell[i-2] - prices[i]);//buy[i]前i天中最后一次为buy操作时的最大利润
 *    sell[i] = Math.max(sell[i-1], buy[i-1] + prices[i]);//sell[i]前i天中最后一次为sell操作时的最大利润
 */

public class Solution {
    public int maxProfit(int[] prices) {
        int n = prices.length;
        if(n == 0 || n == 1) return 0;
        int[] buy = new int[n];
        int[] sell = new int[n];
        buy[0] = -prices[0];
        buy[1] = Math.max(buy[0], -prices[1]);
        sell[0] = 0;
        sell[1] = Math.max(sell[0], buy[0] + prices[1]);
        for(int i = 2; i < n; i++){
            buy[i] = Math.max(buy[i-1], sell[i-2] - prices[i]);
            sell[i] = Math.max(sell[i-1], buy[i-1] + prices[i]);
        }
        return sell[n-1];
    }
}